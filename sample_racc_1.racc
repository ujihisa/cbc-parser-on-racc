class Calc
  token NUM
prechigh
  left  '*' '/'
  left  '+' '-'
preclow
rule
   expr : expr '+' expr { result = val[0] + val[2] }
        | expr '-' expr { result = val[0] - val[2] }
        | expr '*' expr { result = val[0] * val[2] }
        | expr '/' expr { result = val[0] / val[2] }
        | prim          { result = val[0] }

   prim : NUM            { result = val[0] }
        | '(' expr ')'   { result = val[1] }
end
---- inner
  def parse(str)
    @tokens = str.
      split(/([\(\)\+\-\*\/])/).
      select {|c| c && c != "" }
    do_parse()
  end

  def next_token
    case (token = @tokens.shift())
    when /^\d+\z/
      [:NUM, token.to_i]
    when nil
      nil
    else
      [token, nil]
    end
  end
